#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=1e5+10;
const int M=1e9+7;

class maxHeap
{
private:
    int maxSize=10000, indNow=0;
    int heap[10000+1];

    void heapify(int i)
    {
        if(i<1)return;
        if(indNow==0)return;
        int largest=i;
        if(indNow>=2*i and heap[2*i]>heap[largest])largest=2*i;
        if(indNow>=2*i+1 and heap[2*i+1]>heap[largest])largest=2*i+1;
        swap(heap[i], heap[largest]);
    }


public:

    maxHeap()
    {
        for(int i=1;i<=10000;i++)
        {
            heap[i]=-INF;
        }   
    }
    void insert(int x)
    {
        if(indNow>maxSize)
        {
            cout << "Maxsize Reached!\n";
            return;
        }

        heap[++indNow]=x;

        int parent=indNow/2;

        while(parent>=1)
        {
            heapify(parent);
            parent=parent/2;
        }
    }

    void erase(int i)
    {
        swap(heap[i], heap[indNow]);
        heap[indNow]=-INF;
        indNow--;
        if(indNow<=0)return;

        int parent=i;

        
        while(parent<=indNow)
        {
            if(2*parent<=indNow and 2*parent+1<=indNow)
            {
                if(heap[2*parent]>=heap[2*parent+1])
                {
                    if(heap[2*parent]>heap[parent])
                    {
                        heapify(parent);
                        parent=2*parent;
                    }
                    else break;
                }
                else
                {
                    if(heap[2*parent+1]>heap[parent])
                    {
                        heapify(parent);
                        parent=2*parent+1;
                    }
                    else break;
                }
            }

            else if(2*parent<=indNow)
            {
                heapify(parent);
                parent=2*parent;
            }
            else break;
        }
    } 

    int peek()
    {
        if(indNow>=1)return heap[1];
        else return -1;
    }

    int retSize()
    {
        return indNow;
    }

};

void solve()
{
    maxHeap heap;
    heap.insert(110);
    heap.insert(5);
    heap.insert(10);
    heap.insert(15);
    heap.insert(7);
    heap.insert(50);
    heap.insert(47);
    heap.insert(13);
    heap.insert(110);


    cout << heap.peek() << "\n";
    while(heap.retSize()>0)
    {
        cout << heap.peek() << "\n";
        heap.erase(1);
    }
}



signed main()
{
    fastio;
    int t;
    //cin >> t;
    t=1;
    for(int i=1;i<=t;i++)
    {
        //cout << "Case " << i << ": " ;
        solve();
    }
    return 0;
}
