#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=1e5+10;
const int M=1e9+7;


class DSU
{
private:

    int parent[1001];
    int rank[1001];

public:
    DSU()
    {
        for(int i=0;i<=1000;i++)
        {
            parent[i]=-1;
            rank[i]=-1;
        }
    }
    void insert(int x)
    {
        parent[x]=x;
        rank[x]=0;
    }

    int findSet(int x)
    {
        //cout << x << " " << parent[x] << "\n";
        if(parent[x]==x)
        {
            return x;
        }
        else
        {
            return parent[x]=findSet(parent[x]);
        }
    }

    void unionSet(int x, int y)
    {
        x=findSet(x);
        y=findSet(y);

        //cout << x << " " << y << " " << rank[x] << " " << rank[y] << "\n";

        if(x!=y)
        {
            if(rank[y]>rank[x])
            {
                swap(x, y);
            }

            if(rank[x]==rank[y])rank[x]++;

            parent[y]=x;
            //cout << y << " " << parent[y] << " " << rank[parent[y]] << "\n";

        }

    }

};

void solve()
{
    DSU dsu;
    dsu.insert(5);
    dsu.insert(10);
    dsu.insert(20);
    dsu.insert(25);
    dsu.insert(1);
    dsu.insert(17);


    dsu.unionSet(5, 10);
    dsu.unionSet(10, 20);
    cout << dsu.findSet(20) << " " << dsu.findSet(5) << " " << dsu.findSet(10) << "\n";
}



signed main()
{
    fastio;
    int t;
    //cin >> t;
    t=1;
    for(int i=1;i<=t;i++)
    {
        //cout << "Case " << i << ": " ;
        solve();
    }
    return 0;
}
