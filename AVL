#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=1e5+10;
const int M=1e9+7;
const double pi=3.1415926535897932384626433832795028841971;


class Node
{
public:
    int key;
    Node *left;
    Node *right;
    int height;
};

class AVL
{
public:

    Node *root;

    AVL()
    {
       root=NULL;
    }

    int height(Node *N) {
      if (N == NULL)
        return 0;
      return N->height;
    }

    Node *newNode(int key) {
      Node *node = new Node();
      node->key = key;
      node->left = NULL;
      node->right = NULL;
      node->height = 1;
      return (node);
    }

    Node *rightRotate(Node *y) {
      Node *x = y->left;
      Node *T2 = x->right;
      x->right = y;
      y->left = T2;
      y->height = max(height(y->left),height(y->right))+1;
      x->height = max(height(x->left), height(x->right)) +1;
      return x;
    }

    Node *leftRotate(Node *x) {
      Node *y = x->right;
      Node *T2 = y->left;
      y->left = x;
      x->right = T2;
      x->height = max(height(x->left), height(x->right)) +1;
      y->height = max(height(y->left), height(y->right)) +1;
      return y;
    }

    int getBalanceFactor(Node *N) {
      if (N == NULL)
        return 0;
      return height(N->left) - height(N->right);
    }

    Node *insertNode(Node *node, int key) {
      // Find the correct postion and insert the node
      if (node == NULL)
        return (newNode(key));
      if (key < node->key)
        node->left = insertNode(node->left, key);
      else if (key > node->key)
        node->right = insertNode(node->right, key);
      else
        return node;

      node->height = 1 + max(height(node->left),
                   height(node->right));
      int balanceFactor = getBalanceFactor(node);
      if (balanceFactor > 1) {
        if (key < node->left->key) {
          return rightRotate(node);
        } else if (key > node->left->key) {
          node->left = leftRotate(node->left);
          return rightRotate(node);
        }
      }
      if (balanceFactor < -1) {
        if (key > node->right->key) {
          return leftRotate(node);
        } else if (key < node->right->key) {
          node->right = rightRotate(node->right);
          return leftRotate(node);
        }
      }
      return node;
    }

    Node *nodeWithMimumValue(Node *node) {
      Node *current = node;
      while (current->left != NULL)
        current = current->left;
      return current;
    }

    Node *deleteNode(Node *root, int key) {
      // Find the node and delete it
      if (root == NULL)
        return root;
      if (key < root->key)
        root->left = deleteNode(root->left, key);
      else if (key > root->key)
        root->right = deleteNode(root->right, key);
      else {
        if ((root->left == NULL) ||
          (root->right == NULL)) {
          Node *temp = root->left ? root->left : root->right;
          if (temp == NULL) {
            temp = root;
            root = NULL;
          } else
            *root = *temp;
          free(temp);
        } else {
          Node *temp = nodeWithMimumValue(root->right);
          root->key = temp->key;
          root->right = deleteNode(root->right,
                       temp->key);
        }
      }

      if (root == NULL)
        return root;

      root->height = 1 + max(height(root->left),
                   height(root->right));
      int balanceFactor = getBalanceFactor(root);
      if (balanceFactor > 1) {
        if (getBalanceFactor(root->left) >= 0) {
          return rightRotate(root);
        } else {
          root->left = leftRotate(root->left);
          return rightRotate(root);
        }
      }
      if (balanceFactor < -1) {
        if (getBalanceFactor(root->right) <= 0) {
          return leftRotate(root);
        } else {
          root->right = rightRotate(root->right);
          return leftRotate(root);
        }
      }
      return root;
    }

    void printTree(Node *root) {
        
        if(root==NULL)return;
        cout << root->key << " " ;
        printTree(root->left);
        printTree(root->right);

    }
};

signed main() {
  AVL tree;
  tree.root = tree.insertNode(tree.root, 33);
  tree.root = tree.insertNode(tree.root, 13);
  tree.root = tree.insertNode(tree.root, 53);
  tree.root = tree.insertNode(tree.root, 9);
  tree.root = tree.insertNode(tree.root, 21);
  tree.root = tree.insertNode(tree.root, 61);
  tree.root = tree.insertNode(tree.root, 8);
  tree.root = tree.insertNode(tree.root, 11);

  tree.printTree(tree.root);

  cout << "\n";

  tree.root = tree.deleteNode(tree.root, 13);

  tree.printTree(tree.root);
}
