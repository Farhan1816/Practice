#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=2e5+10;
const int M=1e9+7;

class Node
{
public:
    int data;
    Node* left;
    Node* right;

    Node(int x)
    {
        data=x;
        left=NULL;
        right=NULL;
    }
};


class HuffmanCode
{
    
public:

    vector<pair<int,int>>heap;
    int indNow=0;
    vector<pair<int, string>>ans;
    Node* head=NULL;

    HuffmanCode(string s)
    {
        heap.resize(30+5);
        ans.resize(30+5);
        for(int i=1;i<=30;i++)
        {
            ans[i].second="-1";
        }
        
        vector<pair<int, int>>nums(30);
        for(int i=1;i<30;i++)
        {
            nums[i].second=i;
        }
        int count=1;
        for(int i=0;i<s.size();i++)
        {
            nums[s[i]-'a'+1].first++;   
        }

        vector<pair<int, int>>ammount;

        for(int i=1;i<30;i++)
        {
            if(nums[i].first>0)
            {
                insertVal(nums[i].first, nums[i].second);
            }
        }

        //cout << heapSize() << " ";
        // for(int i=1;i<=heapSize();i++)
        // {
        //     cout << heap[i].first << " " << heap[i].second << "\n";
        // }

        Node* arr[1000];
        int xtr=35;

        while(heapSize()>1)
        {   
            pair<int, int>tmp1=heap[1];
            erase();
            pair<int,int>tmp2=heap[1];
            erase();
            //cout << tmp1.second << " " << tmp1.first << " " << tmp2.second << " " << tmp2.first << "\n";

            bool fir=false, sec=false;
            Node* help1;
            Node* help2;
            if(tmp1.second<=30)
            {
                help1=new Node(tmp1.second);
                fir=true;
            }
            else help1=arr[tmp1.second];
            if(tmp2.second<=30)
            {
                sec=true;
                help2=new Node(tmp2.second);
            }
            else help2=arr[tmp2.second];

            Node* tmp=new Node(xtr);

            if(!fir)
            {
                tmp->left=help1;
                tmp->right=help2;
            }
            else
            {
                tmp->left=help2;
                tmp->right=help1;
            }

            arr[xtr]=tmp;

            insertVal(tmp1.first+tmp2.first, xtr++);

        }




        if(heap[1].second<=30)
        {
            ans[heap[1].second].second="1";
        }

        else
        {
            head=arr[heap[1].second];
            string help="0";
            dfs(head, help);
        }
        

    }

    void insertVal(int i, int j)
    {
        heap[++indNow]={i, j};

        int parent=indNow/2;
        while(parent>0)
        {
            heapify(parent);
            parent=parent/2;
        }
    }

    void heapify(int ind)
    {
        int largest=ind;
        if(2*ind<=indNow and heap[2*ind].first<heap[largest].first)largest=2*ind;
        if(2*ind+1<=indNow and heap[2*ind+1].first<heap[largest].first)largest=2*ind+1;
        swap(heap[largest], heap[ind]);
    }

    void erase()
    {
        swap(heap[indNow], heap[1]);
        indNow--;

        int parent=1;

        while(parent<=indNow)
        {
            if(2*parent<=indNow and 2*parent+1<=indNow)
            {
                if(heap[2*parent].first<=heap[2*parent+1].first)
                {
                    heapify(parent);
                    parent=2*parent;
                }
                else
                {
                    heapify(parent);
                    parent=2*parent+1;
                }
            }   

            else if(2*parent<=indNow)
            {
                heapify(parent);
                parent=2*parent;
            }
            else
            {
                break;
            }
        }

    }       

    int heapSize()
    {
        return indNow;
    }

    void dfs(Node* ind, string s)
    {

        if(ind->left==NULL and ind->right==NULL)
        {
            ans[ind->data].second=s;
            return;
        }
        else
        {
            s.push_back('0');
            dfs(ind->left, s);
            s.pop_back();
            s.push_back('1');
            dfs(ind->right, s);
        }
    }

    void print()
    {
        for(int i=1;i<30;i++)
        {
            if(ans[i].second!="-1")
            {
                char c;
                c=i+'a'-1;
                cout << c << " " << ans[i].second << "\n";
            }
        }
    }

};

void solve()
{
    string s;
    cin >> s;
    HuffmanCode need = HuffmanCode(s);
    need.print();
}

signed main()
{
    fastio;
    //precalc();
    int t;
    //cin >> t;
    t=1;
    for(int i=1;i<=t;i++)
    {
        //cout << "Case " << i << ": " ;
        solve();
    }
    return 0;
}
