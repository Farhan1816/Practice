#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=1e5+10;
const int M=998244353;
const double pi=3.1415926535897932384626433832795028841971;

class Node
{
public:
    int key;
    int order;

    Node *sibling, *parent, *child;
    
 
    Node(int key)
    {
        this -> key = key;
        this -> order = 0;
        this -> sibling = this -> parent = this -> child = NULL;
    }
};

 
class BinomialHeap
{

    Node *head;
    
    Node *min;
    
    void combineTrees(Node *root1, Node *root2)
    {
        
        if(root1->key < root2->key){
            swap(root1,root2);
        }
        
        root1 -> parent = root2;
        root1 -> sibling = root2 -> child;
        root2 -> child = root1;

        root2 -> order = root2 -> order + 1;
    }
    
    
    Node* combineHeaps(BinomialHeap *heap1, BinomialHeap *heap2)
    {

        Node *temp1 = new Node(0);
        Node *temp2 = temp1;
  
        Node *root1 = heap1 -> head;
        Node *root2 = heap2 -> head;
        
        if (root1 == NULL) return root2;
        if (root2 == NULL) return root1;
        
        while (root1 != NULL || root2 != NULL)
        {
            if (root1 == NULL)
            {
                temp2 -> sibling = root2;
                temp2 = temp2 -> sibling;
                root2 = root2 -> sibling;
            }
            else if (root2 == NULL)
            {
                temp2 -> sibling = root1;
                temp2 = temp2 -> sibling;
                root1 = root1 -> sibling;
            }
            else
            {
                if (root1 -> order < root2 -> order)
                {
                    temp2 -> sibling = root1;
                    temp2 = temp2 -> sibling;
                    root1 = root1 -> sibling;
                }
                else
                {
                    temp2 -> sibling = root2;
                    temp2 = temp2 -> sibling;
                    root2 = root2 -> sibling;
                }
            }
        }
        return (temp1 -> sibling);
    }

public:

    BinomialHeap() {
        this -> head = NULL;
    }

    BinomialHeap(Node* root){
        this -> head = root;
    }

    bool isEmpty(){
        return (this -> head == NULL);
    }
    
    void insert(Node* root){
        
        BinomialHeap* newHeap=new BinomialHeap(root);
        this -> unionHeap(newHeap);
    }
    
    void unionHeap(BinomialHeap *heap)
    {
        BinomialHeap *heap_final = new BinomialHeap();
     
        heap_final -> head = combineHeaps(this, heap);
        
        if (heap_final -> head == NULL)
        {
            this -> head = NULL;
            this -> min = NULL;
            return;
        }

        Node *prev = NULL;
        Node *curr = heap_final -> head;
        Node *next = curr -> sibling;
        
        while (next != NULL)
        {
            if (curr -> order != next -> order){
                prev = curr;
                curr = next;
            }
         
            else if( curr -> order == next -> order && next -> sibling != NULL && next -> sibling -> order == curr -> order){
                prev = curr;
                curr = next;
            }
            
            else if (curr -> key <= next -> key){
                curr -> sibling = next -> sibling;
                combineTrees(next, curr);
            }
 
            else{
                if (prev == NULL) heap_final -> head = next;
                else prev -> sibling = next;
                combineTrees(curr, next);
                curr = next;
            }
            next = curr -> sibling;
        }
        
        this -> head = heap_final -> head;
        
        //Updating minimum node.
        this -> min = heap_final -> head;
        curr = this -> head;
        while (curr != NULL)
        {
            if (curr -> key < this -> min -> key) this -> min = curr;
            curr = curr -> sibling;
        }
    }
    
    Node* first()
    {
        return this -> min;
    }
    
    Node* extractMin()
    {
        Node *mini = this -> first();
        
        Node *prev = NULL;
        Node *curr1 = this -> head;
        while (curr1 != mini)
        {
            prev = curr1;
            curr1 = curr1 -> sibling;
        }
        
        if (prev == NULL) this -> head = curr1 -> sibling;
        
        else prev -> sibling = curr1 -> sibling;
        
        Node *RevNode = NULL;
        Node *curr2 = mini -> child;
        while (curr2 != NULL)
        {
            Node *next = curr2 -> sibling;
            curr2 -> sibling = RevNode;
            RevNode = curr2;
            curr2 = next;
        }
        
        BinomialHeap *temp = new BinomialHeap();
        temp -> head = RevNode;
        this -> unionHeap(temp);

        return mini;
    }
    
    void decreaseKey(Node *root, int val)
    {
        
        if(val > root->key){
            cout<<"Error! New value greater than current key!\n";
            return;
        }
        
        root -> key = val;

        Node *temp1 = root;
        Node *temp2 = temp1 -> parent;
        while (temp2 != NULL && temp1 -> key < temp2 -> key)
        {
            swap(temp1 -> key, temp2 -> key);
            
            temp1 = temp2;
   
            temp2 = temp1 -> parent;
        }
        
        if (temp1 -> key < this -> min -> key) this -> min = temp1;
    }

 
    void Delete(Node *root)
    {
        decreaseKey(root, INT_MIN);
        extractMin();
    }
    
    void printTree(Node* root){
        
        if(root==nullptr){
            return;
        }
        
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* node = q.front();
            q.pop();
            cout<<node->key<<" ";

    
            if (node->child != nullptr) {
                Node* temp = node->child;
                    while (temp != nullptr) {
                        q.push(temp);
                        temp = temp->sibling;
                    }
            } 
        }
   }
    
    void printHeap() {
        Node* curr = head;
        while (curr != nullptr) {
            cout<<"B"<<curr->order<<endl;
            cout<<"There are "<<pow(2, curr->order)<<" nodes in this binomial tree"<<endl;
            cout<<"The level order traversal of the tree is ";
            this->printTree(curr);
            curr = curr->sibling;
            cout<<endl<<endl;
        }
    }
};

 
signed main()
{
    BinomialHeap *heap1 = new BinomialHeap();
    heap1->insert(new Node(2));
    heap1->insert(new Node(7));
    heap1->insert(new Node(13));
    heap1->insert(new Node(8));
    heap1->insert(new Node(1));
    
    heap1->printHeap();
    
    cout<<"Minimum key is "<<(heap1 -> extractMin()) -> key<<endl<<endl;

    heap1->printHeap();
    
    cout<<"Minimum key is "<<(heap1 -> extractMin()) -> key<<endl<<endl;
    heap1->printHeap();
}
