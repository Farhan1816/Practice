#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>
#include <functional>
using namespace std;
using namespace __gnu_pbds;

#define int long long 
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long

const int INF=1e18+7;
const int N=1e5+10;
const int M=1e9+7;

class Node
{
public:
    int data;
    Node *next;
    Node(int x)
    {
        data=x;
        next=NULL;
    }
};

class BFS
{
private:
    Node* arr[1001];
    int indNow=0;
    int visited[1001];

    void bfs(int ind)
    {
        //cout << ind << " ";
        queue<int>q;
        q.push(ind);
        while(!q.empty())
        {
            int need=q.front();
            q.pop();
            if(visited[need])continue;
            visited[need]=1;
            cout << need << " ";
            Node *tmp= arr[need];
            while(tmp!=NULL)
            {
                if(!visited[tmp->data])q.push(tmp->data);
                tmp=tmp->next;
            }
        }
    }


public:

    void insert(int x)
    {
        Node* tmp=new Node(x);
        arr[x]= tmp;
        //cout << arr[x]->data << " ";
    }

    void edge(int x, int y)
    {
        Node* tmp=arr[x];
        Node* need= new Node(arr[y]->data);
        while(tmp->next!=NULL)
        {
            tmp=tmp->next;
        }

        tmp->next=need;

        need= new Node(arr[x]->data);

        tmp=arr[y];
        while(tmp->next!=NULL)
        {
            tmp=tmp->next;
        }
        tmp->next=need;
    }

    void go()
    {
        memset(visited, 0, sizeof(visited));
        bfs(5);
    }

};


void solve()
{
    BFS one;
    one.insert(5);
    one.insert(7);
    one.insert(9);
    one.insert(12);
    one.insert(3);
    one.insert(15);
    one.insert(13);

    one.edge(5, 7);
    one.edge(5, 12);
    one.edge(12, 15);
    one.edge(15, 13);
    one.edge(3, 12);
    one.edge(9, 7);
    one.edge(5, 9);
    one.edge(5, 15);

    one.go();

}

signed main()
{
    fastio;
    int t;
    //cin >> t;
    t=1;
    for(int i=1;i<=t;i++)
    {
        //cout << "Case " << i << ": " ;
        solve();
    }
    return 0;
}
