#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;
using namespace std;
#define ll long long
#define ull unsigned long long
#define int long long
 
#define ordered_set tree<pair<int, int>, null_type,less<pair<int, int>>, rb_tree_tag,tree_order_statistics_node_update> 
 
const int N = 1005;
const int INF = 1e9+9;
const int MOD = 1e9+7;
 
int mat[N][N], mat2[N][N];
bool reach[N];

int n, m, k;

bool bfs(int ind)
{
  int p[n+m+2];
  bool vis[n+m+2];
  memset(p, 0, sizeof(p));
  memset(vis, 0, sizeof(vis));
  queue<int>q;
  q.push(0);
  bool pos = false;
  while(!q.empty())
  {
    int tmp = q.front();
    q.pop();
    if(tmp==n+m+1)
    {
      pos = true;
      break;
    }
    for(int i=1;i<=n+m+1;i++)
    {
      if(mat[tmp][i]>0 and !vis[i])
      {
        q.push(i);
        vis[i] = 1;
        p[i] = tmp;
      }
    }
  }
  if(!pos)return pos;
  int now = n+m+1;
  while(now!=0)
  {
    int prev = p[now];
    mat[prev][now]--;
    mat[now][prev]++;
    now = prev;
  }
  return true;
}

void solve()
{
  cin >> n >> m >> k;
  set<int>b, g;
  for(int i=1;i<=k;i++)
  {
    int x, y;
    cin >> x >> y;
    y+=n;
    mat[x][y]=1;
    mat2[x][y]=1;
    //cout << x << " " << y << " " << mat2[x][y] << "\n";
    b.insert(x);
    g.insert(y);
  }
  for(auto i: b)mat[0][i] = 1;
  for(auto i: g)mat[i][n+m+1] = 1;

  int ans = 0;
  while(bfs(0))ans ++;
  cout << ans << "\n";
  queue<int>q;
  q.push(0);
  set<pair<int,int>>s;
  for(int i=1;i<=n+m;i++)
  {
    for(int j=1;j<=n+m;j++)
    {
      //if(mat[i][j])cout << i << " " << j << "\n";
      if(mat2[i][j] and !mat[i][j])
      {
        //cout << "h\n";
        s.insert({min(i, j), max(i, j)});
      }
    }
  }
  for(auto i: s)cout << i.first<< " " << i.second-n << "\n";
}
 
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    //precalc();
    int t = 1;
    //cin >> t;
    for(int i=1;i<=t;i++)
    { 
      // cout << "Case " << i << ": ";
      solve();
    }
}
